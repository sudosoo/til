깃허브를 사용하는 이유는

버전관리 !!!! 때문이죠
버전관리란 :프로젝트 업데이트 상태를 정리한것
언제 무엇이 어떻게 바뀌었는지 상태를 정리한것

Issue (이슈)
회사의 모든 작업 을 말한다.
ex)버그, 오류, 새로운기능, 작업검토 요청 등

기능설명
Commit (올리기)
project의 상태를 저장(기록)하고 조회한다.(푸시 전 임시저장)
버전관리를 하는 이유는 나 이외에도 다른 사람도 보기 때문에
누가 언제 무엇을 바꾼지 커밋메세지에 요약 해 둔다.

Clone (복제)
원격repo(원격 저장소)를 내 컴퓨터에서도 사용할 수 있도록 초기 다운로드 하는 기능


Pull (가져오기)
 원격repo의 commit들을 로컬 repo의 commit들에 합치는것
                           작업 전 commit 된 파일들을 가져와서 작업 한다.

Push (보내기)
로컬repo의 commit 들을 원격 repo의 commit 내역을 합치는 것.
                          작업 후 파일을 업데이트 했다면 작업내용 commit 후 push로 업로드 한다.

Pull -> Commit -> Push


Branch (작업단위)
독립적으로 어떤 작업을 진행하기 위한 공간
(각자 맡은 일을 가져가서 작업한다)

 

Merge (병합)
흩어져서 작업하던 branch들을 병합한다.